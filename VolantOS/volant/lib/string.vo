struct String {
    mem: vec u8;
    func concat(self: *String, str: String) {
        self.mem.concat(str.mem);
    };
    func bytes(self: *String) *u8 {
        return &self.mem[0];
    };
    func push(self: *String, char: u8) {
        self.mem.push(char);
    };
    func pop(self: *String) u8 {
        return self.mem.pop();
    };
    func clone(self: *String) *String {
        str := new String;
        str.mem = self.mem.clone();
        return str;
    };
    func charAt(self: *String, index: size_t) u8 {
        return self.mem[index];
    };
    func toLower(self: *String) {
        for i := 0; i < self.mem.length; ++i {
            
        }
    };
};

export func work from(bytes: *u8) String {
    str := (String){};

    c = bytes[0];
	
    for i: size_t = 1; c != 0; ++i {
        str.push(c);
        c = bytes[c];
    }
    return str;
}